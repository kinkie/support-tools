#!/usr/bin/env bash

set -euo pipefail
repo=""
origin="origin"
upstream="upstream"
backfill=""

# test for tools
SED=`which gsed` || true; SED="${SED:-sed}"
FGREP=`which fgrep` || true; FGREP="${FGREP:-fgrep}"

po2html=`which po2html`
if test -z "$po2html" ; then
    echo "cannot find po2html"
    exit 1
fi
po2txt=`which po2txt`
if test -z "$po2txt" ; then
    echo "cannot find po2txt"
    exit 1
fi

usage() {
cat <<_EOF
use:
 $0 [options] <new version> <old version>
 options:
   -R <github-repo> to use for PRs
   -o <origin>: (git) remote repository for pushing PR branches
                default "origin"
   -u <upstream>: (git) remote repository with public sources to use
                  default "upstream"
   -b : this is a backfill. Create a release for <new version> using
        preexisting tags.

If no ChangeLog entry exists for the new version, prepares one
and helps prepare it for merge.

Otherwise, prepare the release and tag the final version
without artifact as SQUID_<NEW_RELEASE>. Create a branch
named <version>-release and populate it with the
release artifiacts, and finally tag it with RELEASE_<NEW_RELEASE>
_EOF
}

package_release() {
# actually prep the release

    git clean -fdx
    git checkout -b $release_branch $current_branch
    ./bootstrap.sh
    $SED -i~ "s@${new_version}-VCS@${new_version}@" configure.ac && rm configure.ac~
    $SED -i~ "s@${new_version}-VCS@${new_version}@" configure && rm configure~
    $SED -i~ "s@squid_curtime@${release_time}@" include/version.h && rm include/version.h~
    rm -f libltdl/config-h.in~ libltdl/configure~
    # git add -f '**' # ignore .gitignore

    ./configure --silent --enable-translation
    make -j`nproc` dist-all
    tar tfz squid-${new_version}.tar.gz | sed 's@^[^/]*/@@' | grep -v '/$' | xargs git add -f
    git commit -m "Squid v$new_version release"
    git tag "$release_tag"

# prep changelog
    export new_version
    awk "/^Changes in squid-${new_version}/{flag=1} /^$/{flag=0} flag" ChangeLog >$release_changelog_file
    local push_tag
    if [ -z "$backfill" ] ; then push_tag="$new_tag" ; fi
    for file in ChangeLog CONTRIBUTORS COPYING CREDITS README SPONSORS; do cp $file $file.txt; done
    echo "time for pushing. Please run (when ready): "
    echo "git push $upstream $release_branch $push_tag $release_tag"
    echo "gh $repo release create $release_tag -F $release_changelog_file --title "v${new_version}" squid-${new_version}.tar.* {ChangeLog,CONTRIBUTORS,COPYING,CREDITS,README,SPONSORS}.txt"
}

# argument: a tag. Returns 0 if the tag exists, 1 if it doesn't
have_tag() {
    git tag -l "$1" | $FGREP -q "$1"
    return $?
}

have_branch() {
    git branch -l "$1" | $FGREP -q "$1"
    return $?
}

while getopts "hR:o:u:b" optchar ; do
    case "${optchar}" in
    h) usage; exit 0;;
    R) repo="-R ${OPTARG}";;
    o) origin="$OPTARG";;
    u) upstream="$OPTARG";;
    b) backfill="yes";;
    -) break;;
    esac
done
shift $((OPTIND -1))

if [ $# -lt 2 ]; then
    usage
    exit 2
fi

new_version="$1"
old_version="$2"

new_tag=SQUID_`echo $new_version | tr . _`
old_tag=SQUID_`echo $old_version | tr . _`

release_tag=RELEASE_`echo $new_version | tr . _`
release_branch="${new_version}-release"
release_time=`date +%s`

current_branch=`git branch --show-current`
release_prep_branch="prep-v${new_version}"
tmp_changelog_file="ChangeLog-$new_version"
release_changelog_file="/tmp/squid-v${new_version}-changelog"

echo "new: $new_tag old: $old_tag"
echo "repository: $repo"

# check that old tag exists
if ! have_tag "$old_tag" ; then
    echo "could not find tag $old_tag"
    usage
    exit 2
fi

if [ -n "$backfill" ]; then
    if ! have_tag "$new_tag" ; then
        echo "Error: backfill requested but missing tag $new_tag"
        exit 2
    fi
    git reset --hard "$new_tag"
    git clean -fdx
    git branch -D "$release_branch" || true
    git tag -d "$release_tag" || true
    git push -d origin "$release_branch" "$release_tag" || true
    # TODO: here
    package_release
    exit 0
fi

# not a backfill. Wipe tags
have_tag "$release_tag" && git tag -d "$release_tag"
have_tag "$new_tag" && git tag -d "$new_tag"

# if the ChangeLog is not ready, prepare one and bail
if ! fgrep -q "Changes in squid-${new_version}" ChangeLog; then
    if have_branch "$release_prep_branch" ; then
        git branch -D "$release_prep_branch"
        git push -d "$origin" "$release_prep_branch" || true # ignore errors
    fi
    echo "Please prepare the ChangeLog and remove this line" >>$tmp_changelog_file
    echo "Changes in squid-${new_version} (`date '+%d %b %Y'`)" >>$tmp_changelog_file
    git log --no-decorate --oneline ${old_tag}.. | $SED 's@^[^ ]* @	- @;s@(#[0-9]*)$@@' >>$tmp_changelog_file
    echo >> $tmp_changelog_file
    cat ChangeLog >> $tmp_changelog_file
    mv $tmp_changelog_file ChangeLog
    ${EDITOR:-vi} ChangeLog
    git checkout -b $release_prep_branch $current_branch
    git add ChangeLog
    git commit -m "Prep for v$new_version"
    git push $origin
    gh $repo pr create --base $current_branch --title "Prep for v$new_version"
    git switch $current_branch

    echo
    echo "now merge the ChangeLog PR and then run again"
    echo "$0 $@"
    exit 0
fi


# TODO: if have_tag $new_release, then get to that point in time and
#       skip fixing changelog
# check that the release in configure.ac is what we expect it to be
if ! $FGREP -q "AC_INIT([Squid Web Proxy],[${new_version}-VCS],[https://bugs.squid-cache.org/],[squid])" configure.ac ; then
    if ! $FGREP -q "AC_INIT([Squid Web Proxy],[${old_version}-VCS],[https://bugs.squid-cache.org/],[squid])" configure.ac ; then
        echo "old version $old_version not found in configure.ac"
        exit 2
    fi
fi

# update release version in configure.ac
$SED -i~ "s@${old_version}-VCS@${new_version}-VCS@" configure.ac

git add configure.ac
git commit -m "v$new_version"
git tag $new_tag

git branch -D $release_branch

package_release
