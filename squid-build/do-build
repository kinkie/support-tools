#!/usr/bin/env bash

read -d '' helpmsg <<_EOF
options:
  --clean : clean workspace AFTER build
  --clean-before : clean workspace BEFORE build
  --compiler <gcc,clang>
  --continue : do not stop on make errors
  --dir <dir> : use <dir> as build directory
  --do-all : configure and build
  --do-bootstrap : do autoconf bootstrap
  --do-build: do build step
  --do-configure : do configure stage
  --ecap : build ecap
  --help
  --icc
  --in <distro> : use docker image distro to do the build
  --layer <layer> : support shortcuts (e.g. --layer 02)
  --log <file> : log output to <file>
  --mingw : build in a mingw environment
  --no-ccache
  --no-opt : do not optimize
  --parallel <#>
  --pass <arg> : argument passthrough
  --quiet
  --revno <revision>
  --ring : ring at end of build
  --translate : do translations
_EOF
test -e /usr/local/bin/getopt && GETOPT=/usr/local/bin/getopt

# TODO: make do-* argument optionally take a "no" argument
opt=$(${GETOPT:-getopt} --longoptions clean-before,clean,revno:,do-bootstrap,do-configure,do-build,do-all,clang,icc,no-ccache,no-opt,log:,parallel:,help,mingw,ecap,ring,pass:,dir:,compiler:,layer:,continue,in:,quiet,stage: --options ac:nl:j:hkrd:q -- "$@")
if [ $? != 0 ] ; then echo "Problem parsing options; terminating" >&2 ; exit 1 ; fi
eval set -- "$opt"
#default
CC=${CC:-gcc}
CXX=${CXX:-g++}
makeflags=""
quiet=""
do_translate="no"
in_vscode="${VSCODE_IPC_HOOK_CLI:+yes}"

test -n "$in_vscode" && makeflags="$makeflags -w"

while true; do
  case "$1" in
    --ecap) ECAP_CONFIGURE_FLAGS="--enable-ecap=yes"; shift;;
    --no-opt)
      export CFLAGS="$CFLAGS -O0 -g"
      export CXXFLAGS="$CXXFLAGS -O0 -g"
      shift ;;
    --do-bootstrap) do_bootstrap="yes"; shift;;
    -a|--do-all) do_bootstrap="yes"; do_configure="yes"; do_build="yes"; shift;;
    --do-configure) do_configure="yes"; shift;;
    --do-build) do_build="yes"; shift;;
    -c|--compiler) CC=$2; CXX=$(echo $CC|sed 's/gcc/g++/;s/clang/clang++/'); shift 2;;
    --clang) CC="clang"; CXX="clang++"; shift;;
    --icc) CC="icc"; CXX="icpc"; shift;;
    -n|--no-ccache) ccache="no"; export CCACHE_DISABLE=1; shift;;
    -l|--log) logfile="$2" ; shift 2;;
    -h|--help) echo "$helpmsg"; exit 0;;
    -r|--ring) do_ring=true; shift;;
    -j|--parallel) 
	    parallel="-j $2"; 
	    test -n "$in_vscode" && parallel="$parallel --output-sync=recurse "
	    shift 2;;
    -d|--dir) builddir="$2"; shift 2;;
    --in) distro="$2"; shift 2;;
    --pass) extraargs="$2"; shift 2;;
    --clean-before) do_clean_before="yes"; shift;;
    --clean) do_clean_after="yes"; shift;;
    --revno) revno="$2"; shift 2;;
    --layer) layer="$2"; shift 2;;
    -k|--continue) makeflags="-k"; shift;;
    -q|--quiet) quiet=">/dev/null"; shift;;
    --translate) do_translate="yes"; shift;;
    --stage) dtages="$2"; shift 2;;
    --mingw) export host_alias="x86_64-w64-mingw32" CC=x86_64-w64-mingw32-gcc CXX=x86_64-w64-mingw32-g++; distro="ubuntu-focal-mingw" ; shift;;
    --) shift; break;;
    *) echo "internal error"; exit 1;;
  esac
done

exec 3>&1
if [ -n "$logfile" ]; then
  if [ -n "$quiet" ]; then
    exec >$logfile
  else
    exec > >(tee $logfile)
  fi
  exec 2>&1
fi

if [ "$do_translate" = "no" ]; then
  po2html_cmd="--with-po2html=off --with-po2txt=off"
fi


# the default
DISTCHECK_CONFIGURE_FLAGS=" \
        --enable-loadable-modules \
        --disable-gnuregex \
        --enable-optimizations \
        --enable-inline \
        --enable-debug-cbdata \
        --enable-xmalloc-statistics \
        --enable-async-io \
        --enable-disk-io \
        --enable-removal-policies \
        --enable-icmp \
        --enable-delay-pools \
        --enable-icap-client \
        --enable-useragent-log \
        --enable-referer-log \
        --enable-wccp \
        --enable-wccpv2 \
        --enable-kill-parent-hack \
        --enable-snmp \
        --enable-cachemgr-hostname \
        --enable-eui \
        --enable-htcp \
        ${BUILD_WITH_SSL:- --enable-ssl --with-openssl} \
        --enable-forw-via-db \
        --enable-cache-digests \
        --enable-poll \
        --enable-select \
        --enable-http-violations \
        --enable-ipfw-transparent \
        --enable-leakfinder \
        --enable-follow-x-forwarded-for \
        --enable-ident-lookups \
        --enable-internal-dns \
        --enable-default-hostsfile \
        --enable-auth \
        --enable-basic-auth-helpers \
        --enable-ntlm-auth-helpers \
        --enable-negotiate-auth-helpers \
        --enable-digest-auth-helpers \
        --enable-ntlm-fail-open \
        --enable-external-acl-helpers \
        --enable-url-rewrite-helpers \
        --enable-mempools \
        --enable-unlinkd \
        --enable-stacktraces \
        --enable-vary \
        --enable-x-accelerator-vary \
        --enable-ipv6 \
        --disable-auto-locale \
        --disable-translation \
        --enable-zph-qos \
        --enable-esi \
        --with-aio \
        --with-build-environment=default \
        --with-dl \
        --with-dns-cname \
        --with-gnu-ld \
        --with-ipv6-split-stack \
        --with-large-files \
        --with-pic \
        --with-pthreads \
        --disable-arch-native \
        --enable-strict-error-checking \
	${po2html_cmd} \
        "

if [ -n "$layer" ]; then
    for layerdir in test-suite/buildtests `dirname $0`; do
        f=`ls $layerdir/*$layer* 2>/dev/null`
        if [ -n "$f" -a -e "$f" ]; then
            echo "using layer: $f"
            . $f
            break
        fi
    done
fi

if [ "x$ccache" != "xno" ]; then
  CC="ccache $CC"
  CXX="ccache $CXX"
fi

#clean
if [ -n "$do_clean_before" -a -f test-builds.sh ]; then
  touch foo.o
  find . \( -name \*.[oa] -o -name Makefile.in -o -name autom4te.cache -o -name cfgaux -o -name configure -o -name aclocal.m4 -o -name \*~ -o -name autoconf.h.in -o -name config.h.in -o -name \*.lo -o -name .dirstamp \) -type f -delete -print
  for dir in autom4te.cache cfgaux lib/libTrie/autom4te.cache lib/libTrie/cfgaux libltdl lib/libTrie/libltdl; do
    test -d $dir && rm  -rf $dir
  done
  git clean -fxd
fi

if [ -n "$revno" ]; then
  echo "Switching to revision $revno"
  git checkout -r$revno
fi

export CC CXX DISTCHECK_CONFIGURE_FLAGS FS_CONFIGURE_FLAGS extraargs CCACHE_DISABLE
if [ -n "${distro:-}" ]; then
    dockercmd_base="docker run -ti --rm -u $UID -v $HOME:$HOME -w $PWD/${builddir:-} -h build-${distro} -e CC -e CXX -e DISTCHECK_CONFIGURE_FLAGS -e FS_CONFIGURE_FLAGS -e extraargs -e CCACHE_DISABLE -e CCACHE_SECONDARY_STORAGE -e host_alias"
    dockercmd="${dockercmd_base} -w $PWD/${builddir:-} squidcache/buildfarm-$(uname -m)-${distro}"
    dockercmd_bootstrap="${dockercmd_base} -w $PWD squidcache/buildfarm-$(uname -m)-${distro}"
else
    dockercmd=""
    dockercmd_bootstrap=""
fi

#macos hacks
if [ "x$(uname -s)" = "xDarwin" ]; then
  export CPPFLAGS="$CPPFLAGS -I/usr/local/opt/openssl/include -I/usr/local/include"
  export CXXFLAGS="$CXXFLAGS -Wno-deprecated-declarations"
  export LDFLAGS="$LDFLAGS -L/usr/local/lib -L/usr/local/opt/openssl/lib -lresolv -lssl -lcrypto"
  export FS_CONFIGURE_FLAGS="--enable-storeio=ufs,aufs,diskd"
  if [ -d /usr/local/opt/openldap ]; then
      export LDFLAGS="${LDFLAGS} -L/usr/local/opt/openldap/lib"
      export CPPFLAGS="${CPPFLAGS} -I/usr/local/opt/openldap/include"
  fi
  # BUILD_WITH_SSL="--disable-ssl --without-openssl"
fi

# configure
if [ ! -e configure -o "x$do_bootstrap" = "xyes" ]; then
    echo "bootstrapping"
    ${dockercmd_bootstrap} bash -c "./bootstrap.sh && (cd libltdl; autoreconf -fi)"
fi

srcdir=$PWD
if [ -n "$builddir" ]; then
  if [ ! -d "$builddir" ]; then
    echo "Creating build dir $builddir"
    mkdir -p $builddir
  fi
  cd $builddir
fi


if [ -n "$do_configure" -o ! -e "${builddir:-.}/Makefile" ]; then
    echo "running ${srcdir:=.}/configure --cache-file=/tmp/config-${CC#ccache }${distro}.cache $DISTCHECK_CONFIGURE_FLAGS $FS_CONFIGURE_FLAGS --prefix=$HOME/squid/install --without-netfilter-conntrack --disable-build-info $extraargs"
    ${dockercmd} bash -c "${srcdir:=.}/configure --cache-file=/tmp/config-${CC#ccache }.cache $DISTCHECK_CONFIGURE_FLAGS $FS_CONFIGURE_FLAGS --prefix=$HOME/squid/install --without-netfilter-conntrack --disable-build-info $extraargs"
fi

if [ "x$do_build" = "xyes" ]; then
    ${dockercmd} bash -c "if make ${makeflags} ${parallel} ${continue} all && make ${makeflags} ${parallel} ${continue} check ; then echo Success; else make ${makeflags} all check || echo Failure ; fi"
#    ${dockercmd} bash -c "if make ${makeflags} ${parallel} ${continue} all && make ${makeflags} ${parallel} ${continue} check ; then echo Success; else make ${makeflags} all check || echo Failure ; fi | sed -e 's!${srcdir}/!!g'"
fi

if [ -n "$logfile" ]; then
    tail -n 1 "$logfile" >&3
fi

if [ -n "$do_clean_after" ]; then
  ${dockercmd} bash -c "make distclean"
fi

if [ "$do_ring" = "true" ]; then
  echo -n "" >&3
fi
